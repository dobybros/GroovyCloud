// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mobile.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Mobile.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MobileRoot

@implementation MobileRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MobileRoot_FileDescriptor

static GPBFileDescriptor *MobileRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Identity

@implementation Identity

@dynamic id_p;
@dynamic sessionId;
@dynamic userId;
@dynamic service;
@dynamic key;
@dynamic appId;
@dynamic code;
@dynamic terminal;
@dynamic deviceToken;
@dynamic sdkVersion;
@dynamic passive;
@dynamic locale;

typedef struct Identity__storage_ {
  uint32_t _has_storage_[1];
  int32_t terminal;
  int32_t sdkVersion;
  NSString *id_p;
  NSString *sessionId;
  NSString *userId;
  NSString *service;
  NSString *key;
  NSString *appId;
  NSString *code;
  NSString *deviceToken;
  NSString *locale;
} Identity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Identity__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_SessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Identity__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Identity__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "service",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Service,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Identity__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Key,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Identity__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_AppId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Identity__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Code,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Identity__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "terminal",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Terminal,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Identity__storage_, terminal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "deviceToken",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_DeviceToken,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Identity__storage_, deviceToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sdkVersion",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_SdkVersion,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Identity__storage_, sdkVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "passive",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Passive,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "locale",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Locale,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Identity__storage_, locale),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Identity class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Identity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\t\000\003\006\000\006\005\000\t\013\000\n\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IncomingMessage

@implementation IncomingMessage

@dynamic id_p;
@dynamic server;
@dynamic userIdsArray, userIdsArray_Count;
@dynamic service;
@dynamic contentType;
@dynamic contentEncode;
@dynamic content;
@dynamic userService;
@dynamic notSaveOfflineMsg;

typedef struct IncomingMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t contentEncode;
  NSString *id_p;
  NSString *server;
  NSMutableArray *userIdsArray;
  NSString *service;
  NSString *contentType;
  NSData *content;
  NSString *userService;
} IncomingMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = IncomingMessage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IncomingMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "server",
        .dataTypeSpecific.className = NULL,
        .number = IncomingMessage_FieldNumber_Server,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IncomingMessage__storage_, server),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = IncomingMessage_FieldNumber_UserIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IncomingMessage__storage_, userIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "service",
        .dataTypeSpecific.className = NULL,
        .number = IncomingMessage_FieldNumber_Service,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IncomingMessage__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = IncomingMessage_FieldNumber_ContentType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IncomingMessage__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentEncode",
        .dataTypeSpecific.className = NULL,
        .number = IncomingMessage_FieldNumber_ContentEncode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IncomingMessage__storage_, contentEncode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = IncomingMessage_FieldNumber_Content,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IncomingMessage__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "userService",
        .dataTypeSpecific.className = NULL,
        .number = IncomingMessage_FieldNumber_UserService,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(IncomingMessage__storage_, userService),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notSaveOfflineMsg",
        .dataTypeSpecific.className = NULL,
        .number = IncomingMessage_FieldNumber_NotSaveOfflineMsg,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IncomingMessage class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IncomingMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\000userIds\000\005\013\000\006\r\000\010\013\000\t\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Acknowledge

@implementation Acknowledge

@dynamic id_p;
@dynamic msgIdsArray, msgIdsArray_Count;
@dynamic service;

typedef struct Acknowledge__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSMutableArray *msgIdsArray;
  NSString *service;
} Acknowledge__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Acknowledge_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Acknowledge__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = Acknowledge_FieldNumber_MsgIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Acknowledge__storage_, msgIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "service",
        .dataTypeSpecific.className = NULL,
        .number = Acknowledge_FieldNumber_Service,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Acknowledge__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Acknowledge class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Acknowledge__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000msgIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Ping

@implementation Ping

@dynamic id_p;

typedef struct Ping__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} Ping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Ping_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Ping__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Ping class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Ping__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Result

@implementation Result

@dynamic code;
@dynamic description_p;
@dynamic forId;
@dynamic time;
@dynamic serverId;
@dynamic contentEncode;
@dynamic content;

typedef struct Result__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  int32_t contentEncode;
  NSString *description_p;
  NSString *forId;
  NSString *serverId;
  NSData *content;
  int64_t time;
} Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = Result_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Result__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Result_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Result__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "forId",
        .dataTypeSpecific.className = NULL,
        .number = Result_FieldNumber_ForId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Result__storage_, forId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = Result_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Result__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "serverId",
        .dataTypeSpecific.className = NULL,
        .number = Result_FieldNumber_ServerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Result__storage_, serverId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentEncode",
        .dataTypeSpecific.className = NULL,
        .number = Result_FieldNumber_ContentEncode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Result__storage_, contentEncode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = Result_FieldNumber_Content,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Result__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Result class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Result__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\005\000\005\010\000\006\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OutgoingMessage

@implementation OutgoingMessage

@dynamic id_p;
@dynamic userId;
@dynamic service;
@dynamic time;
@dynamic contentType;
@dynamic contentEncode;
@dynamic content;
@dynamic needAck;

typedef struct OutgoingMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t contentEncode;
  NSString *id_p;
  NSString *userId;
  NSString *service;
  NSString *contentType;
  NSData *content;
  int64_t time;
} OutgoingMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingMessage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OutgoingMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingMessage_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OutgoingMessage__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "service",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingMessage_FieldNumber_Service,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OutgoingMessage__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingMessage_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OutgoingMessage__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingMessage_FieldNumber_ContentType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OutgoingMessage__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentEncode",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingMessage_FieldNumber_ContentEncode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OutgoingMessage__storage_, contentEncode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingMessage_FieldNumber_Content,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OutgoingMessage__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "needAck",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingMessage_FieldNumber_NeedAck,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutgoingMessage class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutgoingMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\006\000\005\013\000\006\r\000\010\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IncomingData

@implementation IncomingData

@dynamic id_p;
@dynamic service;
@dynamic contentType;
@dynamic contentEncode;
@dynamic content;

typedef struct IncomingData__storage_ {
  uint32_t _has_storage_[1];
  int32_t contentEncode;
  NSString *id_p;
  NSString *service;
  NSString *contentType;
  NSData *content;
} IncomingData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = IncomingData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IncomingData__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "service",
        .dataTypeSpecific.className = NULL,
        .number = IncomingData_FieldNumber_Service,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IncomingData__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = IncomingData_FieldNumber_ContentType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IncomingData__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentEncode",
        .dataTypeSpecific.className = NULL,
        .number = IncomingData_FieldNumber_ContentEncode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IncomingData__storage_, contentEncode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = IncomingData_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IncomingData__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IncomingData class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IncomingData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\013\000\004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OutgoingData

@implementation OutgoingData

@dynamic id_p;
@dynamic time;
@dynamic service;
@dynamic contentType;
@dynamic contentEncode;
@dynamic content;
@dynamic needAck;

typedef struct OutgoingData__storage_ {
  uint32_t _has_storage_[1];
  int32_t contentEncode;
  NSString *id_p;
  NSString *service;
  NSString *contentType;
  NSData *content;
  int64_t time;
} OutgoingData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OutgoingData__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingData_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OutgoingData__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "service",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingData_FieldNumber_Service,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OutgoingData__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingData_FieldNumber_ContentType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OutgoingData__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentEncode",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingData_FieldNumber_ContentEncode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OutgoingData__storage_, contentEncode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingData_FieldNumber_Content,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OutgoingData__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "needAck",
        .dataTypeSpecific.className = NULL,
        .number = OutgoingData_FieldNumber_NeedAck,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutgoingData class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutgoingData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\004\013\000\005\r\000\007\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Chunk

@implementation Chunk

@dynamic id_p;
@dynamic type;
@dynamic content;
@dynamic chunkNum;
@dynamic offset;
@dynamic totalSize;

typedef struct Chunk__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t chunkNum;
  int32_t offset;
  int32_t totalSize;
  NSString *id_p;
  NSData *content;
} Chunk__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Chunk_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Chunk__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = Chunk_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Chunk__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = Chunk_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Chunk__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "chunkNum",
        .dataTypeSpecific.className = NULL,
        .number = Chunk_FieldNumber_ChunkNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Chunk__storage_, chunkNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = Chunk_FieldNumber_Offset,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Chunk__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalSize",
        .dataTypeSpecific.className = NULL,
        .number = Chunk_FieldNumber_TotalSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Chunk__storage_, totalSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Chunk class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Chunk__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\010\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
