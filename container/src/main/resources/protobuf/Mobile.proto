syntax = "proto3";

option java_package = "com.pbdata.generated.mobile"; 
option java_outer_classname = "MobilePB";
 
//从客户端到服务器端的数据
message Identity { 
  string id = 1;
  string sessionId = 2; //业务上的用户会话ID， 和业务服务器通信时会带上的。 在纯推送业务环境中， 此值为空。 
  string userId = 3; //业务上的用户ID， 和业务服务器通信时会带上的。 
  string service = 4; //如果一个通道需要支持的多种业务， OnlineUserManager 1-* > OnlineUser 1-* > OnlineServiceUser。 为每个Service都需要发送Identity数据注册
  
  string key = 5; //API key， 用于我们做权限控制
  string appId = 6; //应用ID
  string code = 7; //通过登陆服务器分配得到的登陆代码。 
  
  int32 terminal = 8;
  string deviceToken = 9;
  int32 sdkVersion = 10; 
} 

message IncomingMessage { 
  string id = 1;
  string server = 2; // singlechat/*, singlechat/server1
  repeated string userIds = 3; //消息要发送给的用户ID
  string service  = 4; //当该通道支持多种services的时候， 需要指定这条消息是属于哪个service的。 如果该通道只支持一个service， 则可以为空
  
  string contentType = 5; //业务数据的类型
  int32 contentEncode = 6; //业务数据的编码方式， 如果编码为CHUNKED=100， 则content里是包的总长度
  bytes content = 7; //业务数据的二进制
  string userService = 8; //消息要发送到用户的所属service
  bool notSaveOfflineMsg = 9; //是否需要存储离线消息
}

message Acknowledge {
  string id = 1; //此处可以不用
  repeated string msgIds = 2; //已收到的消息ID
  string service  = 3; //来自于那个服务
}

message Ping {
  string id = 1; //此处可以不用
}

//从服务器端到客户端的数据

message Result {
  int32 code = 1;
  string description = 2;
  string forId = 3; //对应Message里的id， 为客户端id
  int64 time = 4; //返回结果的服务器时间
  string serverId = 5; //处理这件事所对应的服务器ID， 可能没有。
  int32 contentEncode = 6; //业务数据的编码方式， 如果编码为CHUNKED=100， 则content里是包的总长度
  bytes content = 7; //业务数据的二进制
}

message OutgoingMessage { //收到消息之后需要发送Acknowledge， 标记已读。
  string id = 1;
  string userId = 2; //发送方的用户Id
  string service = 3; //该消息来源于那个service
  int64 time = 4; //该消息的发送时间
  string contentType = 5; //业务数据的类型
  int32 contentEncode = 6; //业务数据的编码方式， 如果编码为CHUNKED=100， 则content里是包的总长度
  bytes content = 7; //业务数据的二进制
  bool needAck = 8; //默认为true， 在业务需要的情况下为false， 会导致这条下行消息不做离线存储。
}

message IncomingData {
  string id = 1;
  string service = 2; //业务数据的service
  string contentType = 3; //业务数据的类型
  int32 contentEncode = 4; //业务数据的编码方式， 如果编码为CHUNKED=100， 则content里是包的总长度
  bytes content = 5; //业务数据的二进制
}

message OutgoingData {
  string id = 1;
  int64 time = 2; //该消息的发送时间
  string service = 3; //业务数据的service
  string contentType = 4; //业务数据的类型
  int32 contentEncode = 5; //业务数据的编码方式， 如果编码为CHUNKED=100， 则content里是包的总长度
  bytes content = 6; //业务数据的二进制
  bool needAck = 7; //默认为true， 在业务需要的情况下为false， 会导致这条下行消息不做离线存储。(暂时不确定要不要)
}

message Chunk {
    string id = 1; //拆包数据的ID
    int32 type = 2; //被拆包数据的类型， 例如OutgoingMessage, IncomingData, etc
    bytes content = 3; //业务数据的二进制
    int32 chunkNum = 4; //拆包的编号
    int32 offset = 5; //拆包数据的偏移位置
    int32 totalSize = 6; //整包的总大小
}